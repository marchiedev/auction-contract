{"version":3,"file":"hello_near.js","sources":["../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-contract.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../src/helper/assert.ts","../src/model/bet_round.ts","../src/model/player.ts","../src/contract.ts"],"sourcesContent":["export function call(target, key, descriptor) {\n}\nexport function view(target, key, descriptor) {\n}\nexport function NearBindgen(target) {\n    return class extends target {\n        static _init() {\n            // @ts-ignore\n            let args = target.deserializeArgs();\n            let ret = new target(args);\n            // @ts-ignore\n            ret.init();\n            // @ts-ignore\n            ret.serialize();\n            return ret;\n        }\n        static _get() {\n            let ret = Object.create(target.prototype);\n            return ret;\n        }\n    };\n}\n","const U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\nexport function panic(msg) {\n    if (msg !== undefined) {\n        env.panic(msg);\n    }\n    else {\n        env.panic();\n    }\n}\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function jsvmAccountId() {\n    env.jsvm_account_id(0);\n    return env.read_register(0);\n}\nexport function jsvmJsContractName() {\n    env.jsvm_js_contract_name(0);\n    return env.read_register(0);\n}\nexport function jsvmMethodName() {\n    env.jsvm_method_name(0);\n    return env.read_register(0);\n}\nexport function jsvmArgs() {\n    env.jsvm_args(0);\n    return env.read_register(0);\n}\nexport function jsvmStorageWrite(key, value) {\n    let exist = env.jsvm_storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageRead(key) {\n    let exist = env.jsvm_storage_read(key, 0);\n    if (exist === 1n) {\n        return env.read_register(0);\n    }\n    return null;\n}\nexport function jsvmStorageRemove(key) {\n    let exist = env.jsvm_storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageHasKey(key) {\n    let exist = env.jsvm_storage_has_key(key);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmCallRaw(contractName, method, args) {\n    env.jsvm_call(contractName, method, JSON.stringify(args), 0);\n    return env.read_register(0);\n}\nexport function jsvmCall(contractName, method, args) {\n    let ret = jsvmCallRaw(contractName, method, args);\n    if (ret === null) {\n        return ret;\n    }\n    return JSON.parse(ret);\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function jsvmValueReturn(value) {\n    env.jsvm_value_return(value);\n}\n// Standalone only APIs\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else if (status == PromiseResult.Failed ||\n        status == PromiseResult.NotReady) {\n        return status;\n    }\n    else {\n        panic(`Unexpected return code: ${status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport class NearContract {\n    deserialize() {\n        const rawState = near.storageRead(\"STATE\");\n        if (rawState) {\n            const state = JSON.parse(rawState);\n            // reconstruction of the contract class object from plain object\n            let c = this.default();\n            Object.assign(this, state);\n            for (const item in c) {\n                if (c[item].constructor?.deserialize !== undefined) {\n                    this[item] = c[item].constructor.deserialize(this[item]);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Contract state is empty\");\n        }\n    }\n    serialize() {\n        near.storageWrite(\"STATE\", JSON.stringify(this));\n    }\n    static deserializeArgs() {\n        let args = near.input();\n        return JSON.parse(args || \"{}\");\n    }\n    static serializeReturn(ret) {\n        return JSON.stringify(ret);\n    }\n    init() { }\n}\n","import * as near from '../api';\nexport class LookupMap {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    containsKey(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    get(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let raw = near.storageRead(storageKey);\n        if (raw !== null) {\n            return JSON.parse(raw);\n        }\n        return null;\n    }\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        if (near.storageRemove(storageKey)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    set(key, value) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let storageValue = JSON.stringify(value);\n        if (near.storageWrite(storageKey, storageValue)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    extend(objects) {\n        for (let kv of objects) {\n            this.set(kv[0], kv[1]);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes } from \"../utils\";\nconst ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction indexToKey(prefix, index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    let key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/// An iterable implementation of vector that stores its content on the trie.\n/// Uses the following map: index -> element\nexport class Vector {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n    }\n    len() {\n        return this.length;\n    }\n    isEmpty() {\n        return this.length == 0;\n    }\n    get(index) {\n        if (index >= this.length) {\n            return null;\n        }\n        let storageKey = indexToKey(this.prefix, index);\n        return JSON.parse(near.storageRead(storageKey));\n    }\n    /// Removes an element from the vector and returns it in serialized form.\n    /// The removed element is replaced by the last element of the vector.\n    /// Does not preserve ordering, but is `O(1)`.\n    swapRemove(index) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else if (index + 1 == this.length) {\n            return this.pop();\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            let last = this.pop();\n            if (near.storageWrite(key, JSON.stringify(last))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    push(element) {\n        let key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, JSON.stringify(element));\n    }\n    pop() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        else {\n            let lastIndex = this.length - 1;\n            let lastKey = indexToKey(this.prefix, lastIndex);\n            this.length -= 1;\n            if (near.storageRemove(lastKey)) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    replace(index, element) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            if (near.storageWrite(key, JSON.stringify(element))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    clear() {\n        for (let i = 0; i < this.length; i++) {\n            let key = indexToKey(this.prefix, i);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let vector = new Vector(data.prefix);\n        vector.length = data.length;\n        return vector;\n    }\n}\nexport class VectorIterator {\n    constructor(vector) {\n        this.current = 0;\n        this.vector = vector;\n    }\n    next() {\n        if (this.current < this.vector.len()) {\n            let value = this.vector.get(this.current);\n            this.current += 1;\n            return { value, done: false };\n        }\n        return { value: null, done: true };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedMap {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.keyIndexPrefix = prefix + \"i\";\n        let indexKey = prefix + \"k\";\n        let indexValue = prefix + \"v\";\n        this.keys = new Vector(indexKey);\n        this.values = new Vector(indexValue);\n    }\n    len() {\n        let keysLen = this.keys.len();\n        let valuesLen = this.values.len();\n        if (keysLen != valuesLen) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysLen;\n    }\n    isEmpty() {\n        let keysIsEmpty = this.keys.isEmpty();\n        let valuesIsEmpty = this.values.isEmpty();\n        if (keysIsEmpty != valuesIsEmpty) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysIsEmpty;\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    getIndexRaw(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        return indexRaw;\n    }\n    get(key) {\n        let indexRaw = this.getIndexRaw(key);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            let value = this.values.get(index);\n            if (value) {\n                return value;\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n        return null;\n    }\n    set(key, value) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            return this.values.replace(index, value);\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.keys.push(key);\n            this.values.push(value);\n            return null;\n        }\n    }\n    remove(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastKey = this.keys.get(this.len() - 1);\n                if (!lastKey) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastKey != key) {\n                    let lastLookupKey = this.keyIndexPrefix + JSON.stringify(lastKey);\n                    near.storageWrite(lastLookupKey, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.keys.swapRemove(index);\n            return this.values.swapRemove(index);\n        }\n        return null;\n    }\n    clear() {\n        for (let key of this.keys) {\n            let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n            near.storageRemove(indexLookup);\n        }\n        this.keys.clear();\n        this.values.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    extend(kvs) {\n        for (let [k, v] of kvs) {\n            this.set(k, v);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let map = new UnorderedMap(data.prefix);\n        // reconstruct UnorderedMap\n        map.length = data.length;\n        // reconstruct keys Vector\n        map.keys = new Vector(data.prefix + \"k\");\n        map.keys.length = data.keys.length;\n        // reconstruct values Vector\n        map.values = new Vector(data.prefix + \"v\");\n        map.values.length = data.values.length;\n        return map;\n    }\n}\nclass UnorderedMapIterator {\n    constructor(unorderedMap) {\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.values = new VectorIterator(unorderedMap.values);\n    }\n    next() {\n        let key = this.keys.next();\n        let value = this.values.next();\n        if (key.done != value.done) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return { value: [key.value, value.value], done: key.done };\n    }\n}\n","export function assert(statement, message) {\n  if (!statement) {\n    throw Error(`Assertion failed: ${message}`);\n  }\n}\n","import { UnorderedMap } from \"near-sdk-js\";\n\nexport class BetRound {\n  roundId: bigint;\n  players: UnorderedMap;\n  winner: string;\n  highestBid: bigint;\n  startTime: bigint;\n  endTime: bigint;\n  tokenId: string;\n\n  constructor({\n    roundId,\n    players,\n    winner,\n    highestBid,\n    startTime,\n    endTime,\n    tokenId,\n  }: {\n    roundId: bigint;\n    players: UnorderedMap;\n    winner: string;\n    highestBid: bigint;\n    startTime: bigint;\n    endTime: bigint;\n    tokenId: string;\n  }) {\n    this.roundId = roundId;\n    this.players = players;\n    this.winner = winner;\n    this.highestBid = highestBid;\n    this.startTime = startTime;\n    this.endTime = endTime;\n    this.tokenId = tokenId;\n  }\n}\n","export class Player {\n  address: string;\n  amount: bigint;\n\n  constructor({ address, amount }: { address: string; amount: bigint }) {\n    this.address = address;\n    this.amount = amount;\n  }\n}\n","import {\n  NearBindgen,\n  NearContract,\n  near,\n  call,\n  view,\n  UnorderedMap,\n  LookupMap,\n  bytes,\n} from \"near-sdk-js\";\nimport { assert } from \"./helper/assert\";\nimport { BetRound } from \"./model/bet_round\";\nimport { Player } from \"./model/player\";\n\n(BigInt.prototype as any).toJSON = function () {\n  return this.toString();\n};\n\nclass Token {\n  token_id: string;\n  owner_id: string;\n\n  constructor(token_id, owner_id) {\n    this.token_id = token_id;\n    this.owner_id = owner_id;\n  }\n}\n\n// The @NearBindgen decorator allows this code to compile to Base64.\n@NearBindgen\nclass AuctionContract extends NearContract {\n  // NFT\n  owner_id: string;\n  owner_by_id: LookupMap;\n\n  // variables for auction round\n  startTime: bigint;\n  endTime: bigint;\n  roundId: bigint;\n\n  // all players\n  allRounds: UnorderedMap;\n  players: UnorderedMap;\n\n  // variables for current round and last round winner\n  currentWinner: string;\n  currentHighestBid: bigint;\n  lastRoundWinner: string;\n  lastRoundHighestBid: bigint;\n\n  constructor({ owner_id = \"marchie.testnet\" }: { owner_id: string }) {\n    super();\n\n    this.owner_id = near.currentAccountId();\n    this.owner_by_id = new LookupMap(\"a\");\n\n    //execute the NEAR Contract's constructor\n    this.players = new UnorderedMap(\"auction_contract\");\n    this.allRounds = new UnorderedMap(\"auction_contract\");\n    this.roundId = BigInt(0);\n    this.startTime = BigInt(0);\n    this.endTime = BigInt(0);\n  }\n\n  default() {\n    return new AuctionContract({ owner_id: \"\" });\n  }\n\n  // Function Call method for placing a bet\n  @call\n  bet({ address, amount }: { address: string; amount: bigint }): void {\n    // Check if timestamp is between StartTime and EndTime\n    const now = (near.blockTimestamp() as bigint) / BigInt(10 ** 9);\n\n    near.log(`current timestamp is ${now}`);\n\n    assert(now >= this.startTime, \"Auction not yet Started\");\n    assert(now <= this.endTime, \"Auction Ended\");\n\n    // Check if address is from sender and amount matched attached amount\n    const sender = near.predecessorAccountId();\n    const attachedAmount: bigint = near.attachedDeposit() as bigint;\n\n    near.log(`calling from: ${address}`);\n    near.log(`attached amount: ${attachedAmount}`);\n    near.log(`betting amount: ${amount}`);\n\n    assert(sender === address, `Address does not matched Sender Address`);\n    assert(attachedAmount >= amount, `Amount does not matched Attached Amount`);\n\n    // Check if attached ammount higher than current highest bid\n    assert(\n      attachedAmount > this.currentHighestBid,\n      `Attached Amount is not higher than Current Highest Bid`\n    );\n\n    // Betting Logic\n    const player = new Player({ address, amount });\n\n    this.players.set(address, player);\n\n    this.currentWinner = address;\n    this.currentHighestBid = amount;\n\n    near.log(\n      `current winner is ${this.currentWinner} with the highest bid of ${this.currentHighestBid}`\n    );\n  }\n\n  // Function Call method to end current round\n  @call\n  endRound() {\n    // Send a NFT to last round winner\n    this.nftTransfer({\n      receiver_id: this.currentWinner,\n      token_id: this.roundId.toString(),\n      approval_id: near.currentAccountId(),\n      memo: \"\",\n    });\n\n    // Start a new round logic\n    const lastBetRound = new BetRound({\n      roundId: this.roundId,\n      players: this.players,\n      winner: this.currentWinner,\n      highestBid: this.currentHighestBid,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      tokenId: this.roundId.toString(),\n    });\n\n    this.allRounds.set(this.roundId.toString(), lastBetRound);\n\n    // // clear variables\n    this.players.clear();\n    this.lastRoundWinner = this.currentWinner;\n    this.lastRoundHighestBid = this.currentHighestBid;\n    this.currentWinner = \"\";\n    this.currentHighestBid = BigInt(0);\n  }\n\n  // Function Call method to start a new round\n  @call\n  startNewRound({\n    startTime,\n    endTime,\n  }: {\n    startTime: bigint;\n    endTime: bigint;\n  }) {\n    this.roundId += BigInt(1);\n\n    // set start time, end time\n    this.startTime = startTime;\n    this.endTime = endTime;\n\n    near.log(`token id: ${this.roundId}`);\n    near.log(`current account: ${near.currentAccountId()}`);\n\n    // Mint a NFT\n    this.nftMint({\n      token_id: this.roundId.toString(),\n      token_owner_id: near.currentAccountId(),\n      token_metadata: \"\",\n    });\n  }\n\n  // Function View method for fetching current winner\n  @view\n  getCurrentWinner() {\n    return this.currentWinner;\n  }\n\n  // Function View method for fetching current highest bid\n  @view\n  getCurrentHighestBid() {\n    return this.currentHighestBid;\n  }\n\n  @view\n  getCurrentStartTime() {\n    return this.startTime;\n  }\n\n  @view\n  getCurrentEndTime() {\n    return this.endTime;\n  }\n\n  @view\n  getCurrentRoundId() {\n    return this.roundId;\n  }\n\n  @view\n  getLastRoundWinner() {\n    return this.lastRoundWinner;\n  }\n\n  @view\n  getLastRoundHighestBid() {\n    return this.lastRoundHighestBid;\n  }\n\n  @view\n  getPlayers() {\n    return this.players.toArray();\n  }\n\n  // NFT\n  internalTransfer({\n    sender_id,\n    receiver_id,\n    token_id,\n    approval_id: _ai,\n    memo: _m,\n  }: {\n    sender_id: string;\n    receiver_id: string;\n    token_id: string;\n    approval_id: string;\n    memo: string;\n  }) {\n    let owner_id = this.owner_by_id.get(token_id);\n\n    assert(owner_id !== null, \"Token not found\");\n    assert(sender_id === owner_id, \"Sender must be the current owner\");\n    assert(owner_id !== receiver_id, \"Current and next owner must differ\");\n\n    this.owner_by_id.set(token_id, receiver_id);\n\n    return owner_id;\n  }\n\n  @call\n  nftTransfer({\n    receiver_id,\n    token_id,\n    approval_id,\n    memo,\n  }: {\n    receiver_id: string;\n    token_id: string;\n    approval_id: string;\n    memo: string;\n  }) {\n    let sender_id = near.predecessorAccountId();\n    this.internalTransfer({\n      sender_id,\n      receiver_id,\n      token_id,\n      approval_id,\n      memo,\n    });\n  }\n\n  @call\n  nftTransferCall({\n    receiver_id,\n    token_id,\n    approval_id,\n    memo,\n    msg,\n  }: {\n    receiver_id: string;\n    token_id: string;\n    approval_id: string;\n    memo: string;\n    msg: string;\n  }) {\n    near.log(\n      `nftTransferCall called, receiver_id ${receiver_id}, token_id ${token_id}`\n    );\n    let sender_id = near.predecessorAccountId();\n    let old_owner_id = this.internalTransfer({\n      sender_id,\n      receiver_id,\n      token_id,\n      approval_id,\n      memo,\n    });\n\n    const promise = near.promiseBatchCreate(receiver_id);\n    near.promiseBatchActionFunctionCall(\n      promise,\n      \"nftOnTransfer\",\n      bytes(\n        JSON.stringify({\n          senderId: sender_id,\n          previousOwnerId: old_owner_id,\n          tokenId: token_id,\n          msg: msg,\n        })\n      ),\n      0,\n      30000000000000\n    );\n    near.promiseThen(\n      promise,\n      near.currentAccountId(),\n      \"_nftResolveTransfer\",\n      bytes(JSON.stringify({ sender_id, receiver_id, token_id })),\n      0,\n      30000000000000\n    );\n  }\n\n  @call\n  _nftResolveTransfer({\n    sender_id,\n    receiver_id,\n    token_id,\n  }: {\n    sender_id: string;\n    receiver_id: string;\n    token_id: string;\n  }) {\n    near.log(\n      `_nftResolveTransfer called, receiver_id ${receiver_id}, token_id ${token_id}`\n    );\n\n    const promiseResult: any = near.promiseResult(0);\n\n    const isTokenTransfered = JSON.parse(promiseResult);\n    near.log(\n      `${token_id} ${\n        isTokenTransfered ? \"was transfered\" : \"was NOT transfered\"\n      }`\n    );\n\n    if (!isTokenTransfered) {\n      near.log(`Returning ${token_id} to ${receiver_id}`);\n      const currentOwner = this.owner_by_id.get(token_id);\n      if (currentOwner === receiver_id) {\n        this.internalTransfer({\n          sender_id: receiver_id,\n          receiver_id: sender_id,\n          token_id: token_id,\n          approval_id: null,\n          memo: null,\n        });\n        near.log(`${token_id} returned to ${sender_id}`);\n        return;\n      }\n      near.log(\n        `Failed to return ${token_id}. It was burned or not owned by ${receiver_id} now.`\n      );\n    }\n  }\n\n  @call\n  nftMint({\n    token_id,\n    token_owner_id,\n    token_metadata: _,\n  }: {\n    token_id: string;\n    token_owner_id: string;\n    token_metadata: string;\n  }) {\n    let sender_id = near.predecessorAccountId();\n    assert(sender_id === this.owner_id, \"Unauthorized\");\n    assert(this.owner_by_id.get(token_id) === null, \"Token ID must be unique\");\n\n    this.owner_by_id.set(token_id, token_owner_id);\n\n    return new Token(token_id, token_owner_id);\n  }\n\n  @view\n  nftToken({ token_id }: { token_id: string }) {\n    let owner_id = this.owner_by_id.get(token_id);\n    if (owner_id === null) {\n      return null;\n    }\n\n    return new Token(token_id, owner_id);\n  }\n}\n"],"names":["call","target","key","descriptor","view","NearBindgen","_init","args","deserializeArgs","ret","init","serialize","_get","Object","create","prototype","U64_MAX","EVICTED_REGISTER","log","params","env","map","x","undefined","JSON","stringify","join","predecessorAccountId","predecessor_account_id","read_register","blockTimestamp","block_timestamp","attachedDeposit","attached_deposit","panic","msg","storageRead","storage_read","storageHasKey","storage_has_key","storageGetEvicted","currentAccountId","current_account_id","input","promiseThen","promiseIndex","accountId","methodName","amount","gas","promise_then","promiseBatchCreate","promise_batch_create","promiseBatchActionFunctionCall","promise_batch_action_function_call","PromiseResult","promiseResult","resultIdx","status","promise_result","Successful","Failed","NotReady","storageWrite","value","exist","storage_write","storageRemove","storage_remove","NearContract","deserialize","rawState","near","state","parse","c","default","assign","item","constructor","Error","serializeReturn","LookupMap","keyPrefix","containsKey","storageKey","get","raw","remove","set","storageValue","extend","objects","kv","data","u8ArrayToBytes","array","e","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","length","i","charCodeAt","strOrU8Array","checkStringIsBytes","str","ERR_INDEX_OUT_OF_BOUNDS","ERR_INCONSISTENT_STATE","indexToKey","prefix","index","Uint32Array","buffer","Vector","len","isEmpty","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","elements","Symbol","iterator","VectorIterator","clear","toArray","v","vector","current","next","done","UnorderedMap","keyIndexPrefix","indexKey","indexValue","keys","values","keysLen","valuesLen","keysIsEmpty","valuesIsEmpty","serializeIndex","deserializeIndex","rawIndex","getIndexRaw","indexLookup","indexRaw","nextIndex","nextIndexRaw","lastLookupKey","UnorderedMapIterator","kvs","k","unorderedMap","assert","statement","message","BetRound","roundId","players","winner","highestBid","startTime","endTime","tokenId","Player","address","BigInt","toJSON","toString","Token","token_id","owner_id","AuctionContract","owner_by_id","allRounds","bet","now","sender","attachedAmount","currentHighestBid","player","currentWinner","endRound","nftTransfer","receiver_id","approval_id","memo","lastBetRound","lastRoundWinner","lastRoundHighestBid","startNewRound","nftMint","token_owner_id","token_metadata","getCurrentWinner","getCurrentHighestBid","getCurrentStartTime","getCurrentEndTime","getCurrentRoundId","getLastRoundWinner","getLastRoundHighestBid","getPlayers","internalTransfer","sender_id","_ai","_m","nftTransferCall","old_owner_id","promise","senderId","previousOwnerId","_nftResolveTransfer","isTokenTransfered","currentOwner","_","nftToken"],"mappings":"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"}